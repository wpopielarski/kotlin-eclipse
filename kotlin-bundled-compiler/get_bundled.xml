<project default="get_bundled">
    <property name="compiler.tag" value="1.3.0"/>
    <property name="bootstrap_branch" value=""/>
    <property name="idea-version" value="162.1812.17"/>

    <property name="compiler.query" value=".lastSuccessful"/>
    
    <property name="teamcity-base" value="https://teamcity.jetbrains.com"/>
    
    <property name="kotlin-idea-compatible-version" value="IJ2017.3-1" />
    <property name="kotlin-version" value="1.3.0-*"/>
	
    <property name="teamcity-kotlin-url"
              value="${teamcity-base}/guestAuth/app/rest/builds/buildType:Kotlin_130_CompilerAllPlugins,status:success,count:1/artifacts/content"/>
    
    <property name="idea-sdk-url" value="https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea" />
    
    <property name="compiler-artifact-file" value="kotlin-compiler.zip"/>
    <property name="compiler-sources-file" value="kotlin-compiler-sources.jar"/>
    <property name="test-data-file" value="kotlin-test-data.zip" />
    <property name="testModule.lib" value="../kotlin-eclipse-ui-test/lib" />
    
    <property name="openapi-formatter" value="openapi-formatter" />
    <property name="util-formatter" value="util-formatter" />
    <property name="idea-formatter" value="idea-formatter" />
    
    <condition property="branch" value="?branch=${bootstrap_branch}" else="">
        <length string="${bootstrap_branch}" trim="true" when="greater" length="0" />
    </condition>
    
    <property name="project.name" value="kotlin-bundled-compiler" />
        
    <condition property="target.dir" value="${teamcity.build.workingDir}/lib" else="lib">
        <isset property="teamcity.build.workingDir"/>
    </condition>
    
    <property name="testData.dir" value="../kotlin-eclipse-ui-test/common_testData" />
    
    <property name="download.name" value="downloads" />
    <property name="download.dir" value="${target.dir}/${download.name}" />
    
    <condition property="no_eclipse">
        <not>
            <typefound name="eclipse.refreshLocal" />
        </not>
    </condition>

    <target name="refresh_eclipse" unless="no_eclipse">
        <eclipse.refreshLocal resource="${project.name}/${target.dir}" depth="infinite" />
    </target>
    
    <target name="download_test_data">
        <mkdir dir="${testData.dir}" />
        <delete includeemptydirs="true">
            <fileset dir="${testData.dir}" includes="**/*" />
        </delete>
        
        <get 
            src="${teamcity-kotlin-url}/internal/${test-data-file}${branch}" 
            dest="${testData.dir}/${test-data-file}" 
            usetimestamp="true" />
        
        <unzip src="${testData.dir}/${test-data-file}" dest="${testData.dir}" />
        
        <delete file="${testData.dir}/${test-data-file}}" />
    </target>
    
    <target name="download_test_framework_dependencies">
        <mkdir dir="${testModule.lib}" />
        <delete includeemptydirs="true">
            <fileset dir="${testModule.lib}" includes="**/*" />
        </delete>
        
        <get 
            src="http://central.maven.org/maven2/com/google/code/gson/gson/2.3.1/gson-2.3.1.jar" 
            dest="${testModule.lib}/gson-2.3.1.jar" 
            usetimestamp="true"/>
    </target>

    <target name="download_bundled">
        <mkdir dir="${target.dir}" />
        <delete includeemptydirs="true">
            <fileset dir="${target.dir}" includes="**/*" excludes="${download.name}/*" />
        </delete>
        

        <mkdir dir="${download.dir}" />

        <get
                src="${teamcity-kotlin-url}/kotlin-plugin-${kotlin-version}-${kotlin-idea-compatible-version}.zip"
                dest="${download.dir}/${compiler-artifact-file}"
                usetimestamp="true" />

        <unzip src="${download.dir}/${compiler-artifact-file}" dest="${target.dir}">
            <patternset>
                <include name="Kotlin/lib/j2k.jar" />
            </patternset>
            <mapper type="merge" to="kotlin-converter.jar" />
        </unzip>

        <sequential>
            <get 
                src="${idea-sdk-url}/ideaIC/${idea-version}/ideaIC-${idea-version}.zip" 
                dest="${download.dir}/ideaIC.zip" 
                usetimestamp="true"/>
            
            <unzip src="${download.dir}/ideaIC.zip" dest="${target.dir}">
                <patternset>
                    <include name="lib/openapi.jar" />
                    <include name="lib/util.jar" />
                    <include name="lib/idea.jar" />
                </patternset>
                <mapper type="flatten"/>
            </unzip>
            
            <unzip src="${target.dir}/openapi.jar" dest="${download.dir}/${openapi-formatter}">
                <patternset>
                    <include name="com/intellij/psi/codeStyle/**/*.class" />
                    <include name="com/intellij/formatting/**/*.class" />
                    <include name="com/intellij/application/options/**/*.class" />
                    <include name="com/intellij/openapi/options/**/*.class" />
                	<include name="com/intellij/configurationStore/*.class" />
                	<include name="com/intellij/openapi/progress/*.class" />
                </patternset>
            </unzip>
            
            <unzip src="${target.dir}/util.jar" dest="${download.dir}/${util-formatter}">
                <patternset>
                    <include name="com/intellij/openapi/util/**/*.class" />
                    <include name="com/intellij/util/containers/**/*.class" />
                </patternset>
            </unzip>
            
            <unzip src="${target.dir}/idea.jar" dest="${download.dir}/${idea-formatter}">
                <patternset>
                    <include name="com/intellij/formatting/**/*.class" />
                    <include name="com/intellij/psi/formatter/**/*.class" />
                </patternset>
            </unzip>
            
            <jar jarfile="${target.dir}/${openapi-formatter}.jar">
                <fileset dir="${download.dir}/${openapi-formatter}"/>

                <manifest>
                    <attribute name="Built-By" value="JetBrains"/>

                    <attribute name="Implementation-Vendor" value="JetBrains"/>
                    <attribute name="Implementation-Title" value="${openapi-formatter}"/>
                    <attribute name="Implementation-Version" value="1.0"/>
                </manifest>
            </jar>
            
            <jar jarfile="${target.dir}/${util-formatter}.jar">
                <fileset dir="${download.dir}/${util-formatter}"/>

                <manifest>
                    <attribute name="Built-By" value="JetBrains"/>

                    <attribute name="Implementation-Vendor" value="JetBrains"/>
                    <attribute name="Implementation-Title" value="${util-formatter}"/>
                    <attribute name="Implementation-Version" value="1.0"/>
                </manifest>
            </jar>
            
            <jar jarfile="${target.dir}/${idea-formatter}.jar">
                <fileset dir="${download.dir}/${idea-formatter}"/>

                <manifest>
                    <attribute name="Built-By" value="JetBrains"/>

                    <attribute name="Implementation-Vendor" value="JetBrains"/>
                    <attribute name="Implementation-Title" value="${idea-formatter}"/>
                    <attribute name="Implementation-Version" value="1.0"/>
                </manifest>
            </jar>
            
            <delete dir="${download.dir}/${openapi-formatter}"/>
            <delete file="${target.dir}/openapi.jar"/>
            <delete dir="${download.dir}/${util-formatter}"/>
            <delete file="${target.dir}/util.jar"/>
            <delete dir="${download.dir}/${idea-formatter}"/>
            <delete file="${target.dir}/idea.jar"/>
        </sequential>

    	<unzip src="${download.dir}/${compiler-artifact-file}" dest="${target.dir}">
    	           <patternset>
    	               <include name="Kotlin/kotlinc/lib/kotlin-compiler.jar" />
    	               <include name="Kotlin/kotlinc/lib/kotlin-stdlib.jar" />
    	               <include name="Kotlin/kotlinc/lib/kotlin-reflect.jar" />
    	               <include name="Kotlin/kotlinc/lib/kotlin-script-runtime.jar" />
    	               <include name="Kotlin/kotlinc/lib/kotlin-jdk-annotations.jar" />
    	               <include name="Kotlin/kotlinc/lib/kotlin-stdlib-sources.jar" />
    	               <include name="Kotlin/kotlinc/lib/allopen-compiler-plugin.jar"/>
                       <include name="Kotlin/kotlinc/lib/noarg-compiler-plugin.jar"/>
                       <include name="Kotlin/kotlinc/lib/sam-with-receiver-compiler-plugin.jar"/>
                       <include name="Kotlin/kotlinc/lib/annotations-13.0.jar"/>
    	           </patternset>
    	           <mapper type="flatten"/>
    	       </unzip>

        <unzip src="${download.dir}/${compiler-artifact-file}" dest="${target.dir}">
            <patternset>
                <include name="Kotlin/lib/kotlinx-coroutines-core-*.jar"/>
                <include name="Kotlin/lib/kotlinx-coroutines-jdk8-*.jar"/>
            </patternset>
        	<chainedmapper>
        		<flattenmapper/>
        		<regexpmapper from="kotlinx-coroutines-(\w+)-(.*)" to="kotlinx-coroutines-\1.jar"/>
        	</chainedmapper>
        </unzip>
    	       
    	       <get 
    	           src="${teamcity-kotlin-url}/internal/kotlin-ide-common.jar${branch}"
    	           dest="${target.dir}/kotlin-ide-common.jar"
    	           usetimestamp="true" />
        
        <get 
            src="${teamcity-kotlin-url}/internal/kotlin-formatter.jar${branch}"
            dest="${target.dir}/kotlin-formatter.jar"
            usetimestamp="true" />
        
        <get src="${idea-sdk-url}/intellij-core/${idea-version}/intellij-core-${idea-version}.zip" 
            dest="${download.dir}/intellij-core.zip" 
            usetimestamp="true"/>
        
        <unzip src="${download.dir}/intellij-core.zip" dest="${target.dir}">
            <patternset>
                <include name="intellij-core.jar" />
            </patternset>
            <mapper type="flatten"/>
        </unzip>
        
        <!-- Also retrivive sources -->
        <!--<get src="${teamcity-kotlin-url}/maven/org/jetbrains/kotlin/kotlin-compiler/${kotlin-version}/kotlin-compiler-${kotlin-version}-sources.jar"
                    dest="${download.dir}/${compiler-sources-file}" usetimestamp="true" />-->
        <!-- Get idea sources -->
        <get src="${idea-sdk-url}/ideaIC/${idea-version}/ideaIC-${idea-version}-sources.jar" dest="${download.dir}/idea-sdk-sources.jar" usetimestamp="true" />
        
        <!-- Pack souces into single archive -->
        <!--<zip destfile="${target.dir}/${compiler-sources-file}">
            <zipfileset src="${download.dir}/${compiler-sources-file}" />
            <zipfileset src="${download.dir}/idea-sdk-sources.jar" />
        </zip>-->
    </target>
    
    <target name="get_bundled" depends="download_bundled, download_test_data,
        download_test_framework_dependencies, refresh_eclipse">
    </target>
</project>